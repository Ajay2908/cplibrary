<snippet>
	<content><![CDATA[
template <int (*func)(int, int)>
class sparseTree {
private:
  int n, logLim;
  vector<vector<int>> lookup;
public:
  sparseTree(vector <int> &arr) {
    this->n = (int)(arr.size());
    logLim = __lg(n) + 1;
    lookup.resize(n, vector<int>(logLim));
    for (int i = 0; i < n; i++) {
      lookup[i][0] = arr[i];
    }
    for (int j = 1; (1 << j) <= n; j++) {
      for (int i = 0; (i + (1 << j) - 1) < n; i++) {
        lookup[i][j] = func(lookup[i][j - 1], lookup[i + (1 << (j - 1))][j - 1]);
      }
    }
  }
  int query(int l, int r) {
    int j = __lg(r - l + 1);
    return func(lookup[l][j], lookup[r - (1 << j) + 1][j]);
  }
};

int min(int a, int b) {
  return std::min(a, b);
}
int max(int a, int b) {
  return std::max(a, b);
}
int gcd(int a, int b) {
  return __gcd(a, b);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>rmq</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>